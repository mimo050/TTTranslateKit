name: build

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-13
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache Theos
        id: cache-theos
        uses: actions/cache@v4
        with:
          path: $HOME/theos
          key: theos-${{ runner.os }}-${{ hashFiles('.github/workflows/build.yml') }}

      - name: Install Theos (if missing)
        if: steps.cache-theos.outputs.cache-hit != 'true'
        run: git clone --recursive https://github.com/theos/theos.git $HOME/theos

      - name: Setup env & iOS SDK link
        shell: bash
        run: |
          echo "THEOS=$HOME/theos" >> $GITHUB_ENV
          echo "PATH=$HOME/theos/bin:$PATH" >> $GITHUB_ENV
          SDK_PATH=$(xcrun --sdk iphoneos --show-sdk-path)
          mkdir -p "$HOME/theos/sdks"
          ln -sf "$SDK_PATH" "$HOME/theos/sdks/$(basename "$SDK_PATH")"
          ln -sf "$SDK_PATH" "$HOME/theos/sdks/iPhoneOS.sdk"

      - name: Install packaging tools (no dpkg -i)
        continue-on-error: true
        run: |
          brew update
          brew install dpkg ldid || true
          ldid -v || true
          dpkg-deb --version || true

      - name: Build tweak
        env:
          THEOS: ${{ env.THEOS }}
        run: |
          make clean package FINALPACKAGE=1

      - name: Collect dylib & plist into out/
        if: always()
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p out
          # Try common locations for dylib
          DYLIB_PATH=""
          for p in \
            "packages/TTTranslateKit.dylib" \
            ".theos/obj/arm64/TTTranslateKit.dylib" \
            ".theos/obj/TTTranslateKit.dylib" \
            ".theos/obj/**/*.dylib" \
            "out/**/*.dylib" \
          ; do
            match=$(ls -1d $p 2>/dev/null | head -n1 || true)
            if [[ -n "$match" ]]; then
              DYLIB_PATH="$match"
              break
            fi
          done
          if [[ -z "$DYLIB_PATH" ]]; then
            echo "No dylib found"; ls -R . || true; exit 0
          fi
          cp -f "$DYLIB_PATH" out/TTTranslateKit.dylib || true

          # Try to locate a matching plist
          PLIST_PATH=""
          for p in \
            "TTTranslateKit.plist" \
            "packages/**/*.plist" \
            ".theos/**/*.plist" \
            "out/**/*.plist" \
          ; do
            match=$(ls -1d $p 2>/dev/null | head -n1 || true)
            if [[ -n "$match" ]]; then
              PLIST_PATH="$match"
              break
            fi
          done
          if [[ -n "$PLIST_PATH" ]]; then
            cp -f "$PLIST_PATH" out/TTTranslateKit.plist || true
          else
            echo "No plist found â€” continuing with dylib only."
          fi

          echo "Contents of out/:"; ls -la out

      - name: Create bundle zip (dylib + plist)
        if: always()
        shell: bash
        run: |
          cd out
          zip -r TTTranslateKit_bundle.zip TTTranslateKit.dylib TTTranslateKit.plist 2>/dev/null || \
          zip -r TTTranslateKit_bundle.zip TTTranslateKit.dylib

      - name: Upload bundle artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TTTranslateKit-bundle
          path: out/TTTranslateKit_bundle.zip
          if-no-files-found: error

      # (Optional) Also upload raw files separately
      - name: Upload raw dylib/plist
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TTTranslateKit-raw
          path: |
            out/TTTranslateKit.dylib
            out/TTTranslateKit.plist
          if-no-files-found: warn

      - name: Upload deb artifact (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TTTranslateKit-deb
          path: packages/*.deb
          if-no-files-found: warn
